import React, { useContext, useState, useEffect, useRef } from 'react'
import { navigate } from 'gatsby'
import { useForm } from 'react-hook-form'
import AppContext from './AppContext'
import styled from 'styled-components'
import Container from './Container'
import Form, { Select } from './form/Form'
import Button from './Button'
import Icofont from './Icofont'
import userService from '../services/user'
import Seo from './Seo'
import storageAvailable from '../utils/storageAvailable'

const countries = [
  'Albania',
  'Alemania',
  'Andorra',
  'Angola',
  'Antigua y Barbuda',
  'Arabia Saudita',
  'Argelia',
  'Argentina',
  'Armenia',
  'Australia',
  'Austria',
  'Azerbaiy√°n',
  'Bahamas',
  'Bahrein',
  'Bangladesh',
  'Barbados',
  'Belar√∫s',
  'Belice',
  'Benin',
  'Bhut√°n',
  'Bolivia',
  'Bosnia y Herzegovina',
  'Botswana',
  'Brasil',
  'Brunei Darussalam',
  'Bulgaria',
  'Burkina Faso',
  'Burundi',
  'B√©lgica',
  'Cabo Verde',
  'Camboya',
  'Camer√∫n',
  'Canad√°',
  'Chad',
  'Chequia',
  'Chile',
  'China',
  'Chipre',
  'Colombia',
  'Comoras',
  'Congo',
  'Corea del Norte',
  'Corea del Sur',
  'Costa Rica',
  'Croacia',
  'Cuba',
  "C√¥te d'Ivoire",
  'Dinamarca',
  'Djibouti',
  'Dominica',
  'Ecuador',
  'Egipto',
  'El Salvador',
  'Emiratos √Årabes Unidos',
  'Eritrea',
  'Eslovaquia',
  'Eslovenia',
  'Espa√±a',
  'Estados Unidos',
  'Estonia',
  'Eswatini',
  'Etiop√≠a',
  'Fiji',
  'Filipinas',
  'Finlandia',
  'Francia',
  'Gab√≥n',
  'Gambia',
  'Georgia',
  'Ghana',
  'Granada',
  'Grecia',
  'Guatemala',
  'Guinea',
  'Guinea Ecuatorial',
  'Guinea-Bissau',
  'Guyana',
  'Hait√≠',
  'Honduras',
  'Hungr√≠a',
  'India',
  'Indonesia',
  'Iraq',
  'Irlanda',
  'Ir√°n',
  'Islandia',
  'Islas Cook',
  'Islas Feroe',
  'Islas Marshall',
  'Islas Salom√≥n',
  'Israel',
  'Italia',
  'Jamaica',
  'Jap√≥n',
  'Jordania',
  'Kazajst√°n',
  'Kenya',
  'Kirguist√°n',
  'Kiribati',
  'Kuwait',
  'Laos',
  'Lesotho',
  'Letonia',
  'Liberia',
  'Libia',
  'Lituania',
  'Luxemburgo',
  'L√≠bano',
  'Macedonia del Norte',
  'Madagascar',
  'Malasia',
  'Malawi',
  'Maldivas',
  'Malta',
  'Mal√≠',
  'Marruecos',
  'Mauricio',
  'Mauritania',
  'Micronesia',
  'Mongolia',
  'Montenegro',
  'Mozambique',
  'Myanmar',
  'M√©xico',
  'Moldavia',
  'M√≥naco',
  'Namibia',
  'Nauru',
  'Nepal',
  'Nicaragua',
  'Nigeria',
  'Niue',
  'Noruega',
  'Nueva Zelandia',
  'N√≠ger',
  'Om√°n',
  'Pakist√°n',
  'Palau',
  'Panam√°',
  'Papua Nueva Guinea',
  'Paraguay',
  'Pa√≠ses Bajos',
  'Per√∫',
  'Polonia',
  'Portugal',
  'Qatar',
  'Reino Unido',
  'Rep√∫blica Centroafricana',
  'Rep√∫blica Democr√°tica del Congo',
  'Rep√∫blica Dominicana',
  'Rumania',
  'Russia',
  'Rwanda',
  'Saint Kitts y Nevis',
  'Samoa',
  'San Marino',
  'San Vicente y las Granadinas',
  'Santa Luc√≠a',
  'Santo Tom√© y Pr√≠ncipe',
  'Senegal',
  'Serbia',
  'Seychelles',
  'Sierra Leona',
  'Singapur',
  'Siria',
  'Somalia',
  'Sri Lanka',
  'Sud√°frica',
  'Sud√°n',
  'Sud√°n del Sur',
  'Suecia',
  'Suiza',
  'Surinam',
  'Tailandia',
  'Tanzania',
  'Tayikist√°n',
  'Timor-Leste',
  'Togo',
  'Tokelau',
  'Tonga',
  'Trinidad y Tabago',
  'Turkmenist√°n',
  'Turqu√≠a',
  'Tuvalu',
  'T√∫nez',
  'Ucrania',
  'Uganda',
  'Uruguay',
  'Uzbekist√°n',
  'Vanuatu',
  'Venezuela',
  'Viet Nam',
  'Yemen',
  'Zambia',
  'Zimbabwe'
]

const UserContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  width: 100%;
  gap: 2rem;
  margin-top: 2rem;
  & > *:last-child {
    max-width: 60rem;
    margin-right: auto;
  }
  @media only screen and (min-width: 40em) {
    flex-direction: row;
  }
`

const UserAvatar = styled.div`
  position: relative;
  width: 100%;
  align-self: center;
  img {
    overflow: hidden;
    width: 100%;
    object-fit: cover;
    aspect-ratio: 1/1;
    border-radius: 50%;
    border: 7px solid var(--color-fg-${props => props.theme.theme});
    pointer-events: none;
  }
  .update-picture {
    position: absolute;
    bottom: 15px;
    right: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 72px;
    height: 72px;
    border-radius: 50%;
    background-color: var(--color-fg-accent-${props => props.theme.theme});
    color: var(--color-bg-${props => props.theme.theme});
    font-size: 44px;
    cursor: pointer;
    &:active {
      transform: scale(0.95);
    }
  }
`

const UserInfo = styled.div`
  display: flex;
  width: 100%;
  flex-direction: column;
  h1 {
    text-align: center;
  }
  @media only screen and (min-width: 40em) {
    max-width: 25rem;
    padding-right: 2rem;
  }
`

const Settings = () => {
  const baseUrl = process.env.GATSBY_API_URL

  const {
    register: registerInfo,
    handleSubmit: handleSubmitInfo,
    setValue: setInfoValue,
    watch: watchInfo,
    formState: { errors: errorsInfo }
  } = useForm({
    defaultValues: {
      country: countries[Math.floor(Math.random() * (countries.length - 1))],
      about: '',
      password: '',
      passwordConfirm: ''
    }
  })

  const {
    register: registerPicture,
    handleSubmit: handleSubmitPicture,
    setValue: setPictureValue
  } = useForm({
    defaultValues: {
      picture: null
    }
  })

  const password = useRef({})
  password.current = watchInfo('password')

  const passwordsAreEqual = value => value === password.current || 'Las contrase√±as no coinciden.'

  const { user, setUser, setNotification } = useContext(AppContext)
  const [pictureUrl, setPictureUrl] = useState(null)

  useEffect(() => {
    if (userService.isLoggedIn()) {
      const user = userService.getStoredUser()
      setUser(user)
      if (user.country) { setInfoValue('country', user.country) }
      if (user.about) { setInfoValue('about', user.about) }
      setPictureUrl(`${baseUrl}/users/${user.nick}/picture`)
    } else {
      navigate('/app/login')
    }
  }, [])

  const onSubmitInfo = async data => {
    const formData = {
      country: data.country,
      about: data.about
    }
    if (data.password.length > 0) {
      formData.password = data.password
    }
    const { token, nick } = user
    try {
      const response = await userService.update(nick, formData, token)
      if (response.error) {
        throw new Error(response.error)
      }
      setInfoValue('password', '')
      setInfoValue('passwordConfirm', '')
      const updatedUser = { ...user, ...response }
      setUser(updatedUser)
      if (storageAvailable('localStorage')) {
        localStorage.setItem('storedUser', JSON.stringify(updatedUser))
      }
      setNotification({
        message: 'Cambios guardados correctamente üéâ',
        error: false
      })
    } catch (e) {
      setNotification({ message: 'Error al guardar los cambios üòî', error: true })
    }
    setTimeout(() => {
      setNotification({ message: '', error: false })
    }, 3000)
  }

  const onSubmitPicture = async data => {
    try {
      const { token, nick } = user
      const picture = data.picture[0]
      const formData = new FormData()
      formData.append('file', picture)
      await userService.updatePicture(formData, nick, token)
      setPictureUrl(URL.createObjectURL(picture))
      setNotification({
        message: 'Imagen actualizada correctamente üéâ',
        error: false
      })
    } catch (e) {
      setNotification({ message: 'Error al subir imagen üòî', error: true })
    }
    setTimeout(() => {
      setNotification({ message: '', error: false })
    }, 3000)
    setPictureValue(null)
  }

  const onPictureChange = event => {
    if (event.target.files.length > 0) {
      handleSubmitPicture(onSubmitPicture)()
    }
  }

  return (
    <>
      <Seo title={`Editar perfil: ${user.nick}`} />
      <section>
        <Container>
          <UserContainer>
            <UserInfo>
              <UserAvatar>
                <img
                  src={pictureUrl}
                  alt={user.nick}
                />
                <Form>
                  <label htmlFor='upload-picture' className='file-input'>
                    <div className='update-picture'>
                      <Icofont className='icofont-ui-camera' />
                    </div>
                  </label>
                  <input
                    id='upload-picture'
                    type='file'
                    accept='image/*'
                    {...registerPicture('picture', {
                      onChange: onPictureChange,
                      validate: {
                        justOne: selected => selected?.length === 1 || 'No se ha seleccionado imagen.',
                        fileSize: selected => selected[0]?.size <= 3000000 || 'Imagen demasiado grande.'
                      }
                    })}
                  />
                </Form>
              </UserAvatar>
              <h1>{user.nick}</h1>
            </UserInfo>
            <Form onSubmit={handleSubmitInfo(onSubmitInfo)}>
              <Select
                label='¬øDe qu√© pa√≠s eres?'
                {...registerInfo('country')}
              >
                {countries.map(country => (
                  <option key={country}>{country}</option>
                ))}
              </Select>
              <label htmlFor='about'>Cu√©ntanos m√°s sobre ti:</label>
              <textarea rows='3' maxLength='300' {...registerInfo('about')} />
              <label htmlFor='password'>Nueva contrase√±a:</label>
              <input type='password' {...registerInfo('password', { minLength: { value: 8, message: 'Deben ser 8 caracteres o m√°s.' } })} />
              {errorsInfo.password && <span className='error'>{errorsInfo.password.message || 'Este campo es obligatorio.'}</span>}
              <label htmlFor='passwordConfirm'>Confirmar contrase√±a:</label>
              <input type='password' {...registerInfo('passwordConfirm', { validate: v => passwordsAreEqual(v) })} />
              {errorsInfo.passwordConfirm && <span className='error'>{errorsInfo.passwordConfirm.message || null}</span>}
              <Button type='submit' primary>
                Guardar cambios
              </Button>
            </Form>
          </UserContainer>
        </Container>
      </section>
    </>
  )
}

export default Settings
